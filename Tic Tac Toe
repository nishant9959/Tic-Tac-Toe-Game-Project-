<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe by NK Gaming</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Reverted to the original 'Poppins' font -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <!-- Tone.js for generating sound effects in the browser -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.min.js"></script>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        /* Reverted to the original, cleaner X and O styles */
        .cell-x::before {
            content: 'X';
            font-size: 5rem;
            line-height: 1;
            font-weight: 700;
            color: #3b82f6; /* Tailwind blue-500 */
        }
        .cell-o::before {
            content: 'O';
            font-size: 5rem;
            line-height: 1;
            font-weight: 700;
            color: #ef4444; /* Tailwind red-500 */
        }
        /* Reverted to the original winning cell animation */
        .winning-cell {
            animation: bounce 0.8s ease-in-out;
            background-color: #374151; /* gray-700 */
        }
        @keyframes bounce {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        /* Updated active mode button to match the classic theme */
        .active-mode {
            background-color: #4f46e5; /* indigo-600 */
            color: #ffffff;
            transform: scale(1.05);
        }
    </style>
</head>
<body class="bg-gray-900 text-white flex items-center justify-center min-h-screen p-4">

    <main class="w-full max-w-md mx-auto text-center bg-gray-800 p-6 sm:p-8 rounded-2xl shadow-2xl">
        <!-- Game Title with original gradient -->
        <h1 class="text-4xl sm:text-5xl font-bold mb-2 text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-red-400">Tic Tac Toe</h1>
        
        <!-- Game Status Display -->
        <h2 id="status" class="text-xl sm:text-2xl font-semibold mb-4 h-8 transition-all duration-300">Your Turn!</h2>

        <!-- Score Tracker styled to match the theme -->
        <div class="flex justify-center gap-4 my-4 text-base">
            <div class="p-2 rounded-md bg-gray-700"><span id="score-label-x">Player X: </span><span id="score-x">0</span></div>
            <div class="p-2 rounded-md bg-gray-700">Ties: <span id="score-ties">0</span></div>
            <div class="p-2 rounded-md bg-gray-700"><span id="score-label-o">AI (O): </span><span id="score-o">0</span></div>
        </div>

        <!-- Game Board -->
        <div id="game-board" class="grid grid-cols-3 gap-3 sm:gap-4 my-6">
            <!-- Cells will be generated by JavaScript -->
        </div>

        <!-- Controls with original theme -->
        <div class="flex flex-col items-center justify-center gap-4">
             <button id="restart-button" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-8 rounded-full text-lg transition-transform transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-indigo-500">
                New Round
            </button>
            <div class="flex gap-2 bg-gray-700 p-1 rounded-full">
                <button id="pva-button" class="mode-button active-mode text-sm py-1 px-4 rounded-full transition-all duration-300">Player vs AI</button>
                <button id="pvp-button" class="mode-button text-sm py-1 px-4 rounded-full transition-all duration-300 text-gray-300">Player vs Player</button>
            </div>
        </div>
        
        <!-- Watermark -->
        <footer class="text-gray-500 text-xs mt-8">
            NK Gaming
        </footer>
    </main>

    <script>
        // DOM Element References
        const gameBoard = document.getElementById('game-board');
        const statusDisplay = document.getElementById('status');
        const restartButton = document.getElementById('restart-button');
        const pvaButton = document.getElementById('pva-button');
        const pvpButton = document.getElementById('pvp-button');
        const scoreXDisplay = document.getElementById('score-x');
        const scoreTiesDisplay = document.getElementById('score-ties');
        const scoreODisplay = document.getElementById('score-o');
        const scoreLabelX = document.getElementById('score-label-x');
        const scoreLabelO = document.getElementById('score-label-o');

        // Game State Variables
        let gameActive = true;
        let currentPlayer = 'X';
        let gameState = ["", "", "", "", "", "", "", "", ""];
        let gameMode = 'pva';
        let scores = { x: 0, o: 0, ties: 0 };
        let isAudioStarted = false;

        // Sound Effects using Tone.js
        let clickSound, winSound, drawSound;

        const winningConditions = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ];

        // --- ROBUST AUDIO INITIALIZATION ---
        async function startAudio() {
            if (isAudioStarted) return;
            try {
                await Tone.start();
                clickSound = new Tone.Synth({ oscillator: { type: 'sine' }, envelope: { attack: 0.01, decay: 0.1, sustain: 0, release: 0.1 } }).toDestination();
                winSound = new Tone.Synth({ oscillator: { type: 'triangle' }, envelope: { attack: 0.01, decay: 0.2, sustain: 0.1, release: 0.2 } }).toDestination();
                drawSound = new Tone.Synth({ oscillator: { type: 'sawtooth' }, envelope: { attack: 0.01, decay: 0.5, sustain: 0, release: 0.2 } }).toDestination();
                isAudioStarted = true;
            } catch (e) {
                console.error("Could not start audio context:", e);
            }
        }

        function handleCellClick(clickedCellEvent) {
            const clickedCell = clickedCellEvent.target;
            const clickedCellIndex = parseInt(clickedCell.getAttribute('data-cell-index'));

            if (gameState[clickedCellIndex] !== "" || !gameActive || (gameMode === 'pva' && currentPlayer === 'O')) {
                return;
            }
            
            if (isAudioStarted) clickSound.triggerAttackRelease('C4', '8n');
            processMove(clickedCell, clickedCellIndex);

            if (gameActive && gameMode === 'pva' && currentPlayer === 'O') {
                statusDisplay.innerHTML = "AI's Turn...";
                setTimeout(handleAIMove, 700);
            }
        }
        
        function processMove(cell, index) {
            handleCellPlayed(cell, index);
            handleResultValidation();
        }

        function handleCellPlayed(clickedCell, clickedCellIndex) {
            gameState[clickedCellIndex] = currentPlayer;
            clickedCell.classList.add(currentPlayer === 'X' ? 'cell-x' : 'cell-o');
        }

        function handleResultValidation() {
            let roundWon = false;
            let winningCombo = [];

            for (let i = 0; i < winningConditions.length; i++) {
                const winCondition = winningConditions[i];
                let a = gameState[winCondition[0]];
                let b = gameState[winCondition[1]];
                let c = gameState[winCondition[2]];
                if (a === '' || b === '' || c === '') continue;
                if (a === b && b === c) {
                    roundWon = true;
                    winningCombo = winCondition;
                    break;
                }
            }

            if (roundWon) {
                statusDisplay.innerHTML = `${gameMode === 'pva' && currentPlayer === 'O' ? 'AI' : 'Player ' + currentPlayer} wins!`;
                gameActive = false;
                scores[currentPlayer.toLowerCase()]++;
                if (isAudioStarted) winSound.triggerAttackRelease('G5', '4n', Tone.now());
                winningCombo.forEach(index => {
                    document.querySelector(`[data-cell-index='${index}']`).classList.add('winning-cell');
                });
                updateScoreDisplay();
                return;
            }

            if (!gameState.includes("")) {
                statusDisplay.innerHTML = `It's a Draw!`;
                gameActive = false;
                scores.ties++;
                if (isAudioStarted) drawSound.triggerAttackRelease('C3', '2n', Tone.now());
                updateScoreDisplay();
                return;
            }

            handlePlayerChange();
        }

        function handlePlayerChange() {
            currentPlayer = currentPlayer === "X" ? "O" : "X";
            if (gameMode === 'pva') {
                statusDisplay.innerHTML = currentPlayer === 'X' ? "Your Turn!" : "AI's Turn...";
            } else {
                statusDisplay.innerHTML = `Player ${currentPlayer}'s Turn`;
            }
        }

        function handleRestartGame() {
            gameActive = true;
            currentPlayer = "X";
            gameState = ["", "", "", "", "", "", "", "", ""];
            if (gameMode === 'pva') {
                statusDisplay.innerHTML = "Your Turn!";
            } else {
                statusDisplay.innerHTML = "Player X's Turn";
            }
            document.querySelectorAll('.cell').forEach(cell => {
                cell.className = 'cell w-24 h-24 sm:w-28 sm:h-28 bg-gray-900 rounded-lg flex items-center justify-center cursor-pointer transition-colors duration-300 hover:bg-gray-700';
            });
        }
        
        // --- UPGRADED AI LOGIC ---
        function handleAIMove() {
            if (!gameActive) return;

            let move = findBestMove('O');
            if (move !== null) { makeAIMove(move); return; }

            move = findBestMove('X');
            if (move !== null) { makeAIMove(move); return; }

            if (gameState[4] === "") { makeAIMove(4); return; }

            const corners = [0, 2, 6, 8].filter(index => gameState[index] === "");
            if (corners.length > 0) { makeAIMove(corners[Math.floor(Math.random() * corners.length)]); return; }
            
            const availableCells = gameState.map((cell, index) => cell === "" ? index : null).filter(val => val !== null);
            if(availableCells.length > 0) { makeAIMove(availableCells[Math.floor(Math.random() * availableCells.length)]); }
        }

        function findBestMove(player) {
            for (let i = 0; i < winningConditions.length; i++) {
                const [a, b, c] = winningConditions[i];
                if (gameState[a] === player && gameState[b] === player && gameState[c] === "") return c;
                if (gameState[a] === player && gameState[c] === player && gameState[b] === "") return b;
                if (gameState[b] === player && gameState[c] === player && gameState[a] === "") return a;
            }
            return null;
        }

        function makeAIMove(index) {
            const cellToClick = document.querySelector(`[data-cell-index='${index}']`);
            if (isAudioStarted) clickSound.triggerAttackRelease('G3', '8n');
            processMove(cellToClick, index);
        }
        // --- END OF AI LOGIC ---

        function updateScoreDisplay() {
            scoreXDisplay.textContent = scores.x;
            scoreODisplay.textContent = scores.o;
            scoreTiesDisplay.textContent = scores.ties;
        }

        function setGameMode(mode) {
            if (gameMode === mode) return;
            gameMode = mode;
            
            pvaButton.classList.toggle('active-mode', mode === 'pva');
            pvpButton.classList.toggle('active-mode', mode === 'pvp');
            
            scoreLabelO.textContent = mode === 'pva' ? "AI (O): " : "Player O: ";
            
            scores = { x: 0, o: 0, ties: 0 };
            updateScoreDisplay();
            handleRestartGame();
        }

        function initializeGame() {
            for (let i = 0; i < 9; i++) {
                const cell = document.createElement('div');
                cell.setAttribute('data-cell-index', i);
                cell.className = 'cell w-24 h-24 sm:w-28 sm:h-28 bg-gray-900 rounded-lg flex items-center justify-center cursor-pointer transition-colors duration-300 hover:bg-gray-700';
                gameBoard.appendChild(cell);
            }
            
            updateScoreDisplay();

            // --- Attaching Event Listeners ---
            document.body.addEventListener('click', startAudio, { once: true });

            document.querySelectorAll('.cell').forEach(cell => cell.addEventListener('click', handleCellClick));
            restartButton.addEventListener('click', handleRestartGame);
            pvaButton.addEventListener('click', () => setGameMode('pva'));
            pvpButton.addEventListener('click', () => setGameMode('pvp'));
        }

        initializeGame();
    </script>

</body>
</html>

